{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar tslib = require('tslib');\n\nvar util = require('@firebase/util');\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\n\n\nvar Component =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param name The public service name, e.g. app, auth, firestore, database\r\n   * @param instanceFactory Service factory responsible for creating the public interface\r\n   * @param type whether the service provided by the component is public or private\r\n   */\n  function Component(name, instanceFactory, type) {\n    this.name = name;\n    this.instanceFactory = instanceFactory;\n    this.type = type;\n    this.multipleInstances = false;\n    /**\r\n     * Properties to be added to the service namespace\r\n     */\n\n    this.serviceProps = {};\n    this.instantiationMode = \"LAZY\"\n    /* LAZY */\n    ;\n  }\n\n  Component.prototype.setInstantiationMode = function (mode) {\n    this.instantiationMode = mode;\n    return this;\n  };\n\n  Component.prototype.setMultipleInstances = function (multipleInstances) {\n    this.multipleInstances = multipleInstances;\n    return this;\n  };\n\n  Component.prototype.setServiceProps = function (props) {\n    this.serviceProps = props;\n    return this;\n  };\n\n  return Component;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\n\nvar Provider =\n/** @class */\nfunction () {\n  function Provider(name, container) {\n    this.name = name;\n    this.container = container;\n    this.component = null;\n    this.instances = new Map();\n    this.instancesDeferred = new Map();\n  }\n  /**\r\n   * @param identifier A provider can provide mulitple instances of a service\r\n   * if this.component.multipleInstances is true.\r\n   */\n\n\n  Provider.prototype.get = function (identifier) {\n    if (identifier === void 0) {\n      identifier = DEFAULT_ENTRY_NAME;\n    } // if multipleInstances is not supported, use the default name\n\n\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      var deferred = new util.Deferred();\n      this.instancesDeferred.set(normalizedIdentifier, deferred); // If the service instance is available, resolve the promise with it immediately\n\n      try {\n        var instance = this.getOrInitializeService(normalizedIdentifier);\n\n        if (instance) {\n          deferred.resolve(instance);\n        }\n      } catch (e) {// when the instance factory throws an exception during get(), it should not cause\n        // a fatal error. We just return the unresolved promise in this case.\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier).promise;\n  };\n\n  Provider.prototype.getImmediate = function (options) {\n    var _a = tslib.__assign({\n      identifier: DEFAULT_ENTRY_NAME,\n      optional: false\n    }, options),\n        identifier = _a.identifier,\n        optional = _a.optional; // if multipleInstances is not supported, use the default name\n\n\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    try {\n      var instance = this.getOrInitializeService(normalizedIdentifier);\n\n      if (!instance) {\n        if (optional) {\n          return null;\n        }\n\n        throw Error(\"Service \" + this.name + \" is not available\");\n      }\n\n      return instance;\n    } catch (e) {\n      if (optional) {\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  };\n\n  Provider.prototype.getComponent = function () {\n    return this.component;\n  };\n\n  Provider.prototype.setComponent = function (component) {\n    var e_1, _a;\n\n    if (component.name !== this.name) {\n      throw Error(\"Mismatching Component \" + component.name + \" for Provider \" + this.name + \".\");\n    }\n\n    if (this.component) {\n      throw Error(\"Component for \" + this.name + \" has already been provided\");\n    }\n\n    this.component = component; // if the service is eager, initialize the default instance\n\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService(DEFAULT_ENTRY_NAME);\n      } catch (e) {// when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    try {\n      // Create service instances for the pending promises and resolve them\n      // NOTE: if this.multipleInstances is false, only the default instance will be created\n      // and all promises with resolve with it regardless of the identifier.\n      for (var _b = tslib.__values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var _d = tslib.__read(_c.value, 2),\n            instanceIdentifier = _d[0],\n            instanceDeferred = _d[1];\n\n        var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n\n        try {\n          // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n          var instance = this.getOrInitializeService(normalizedIdentifier);\n          instanceDeferred.resolve(instance);\n        } catch (e) {// when the instance factory throws an exception, it should not cause\n          // a fatal error. We just leave the promise unresolved.\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  Provider.prototype.clearInstance = function (identifier) {\n    if (identifier === void 0) {\n      identifier = DEFAULT_ENTRY_NAME;\n    }\n\n    this.instancesDeferred.delete(identifier);\n    this.instances.delete(identifier);\n  }; // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n\n\n  Provider.prototype.delete = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var services;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            services = Array.from(this.instances.values());\n            return [4\n            /*yield*/\n            , Promise.all(tslib.__spread(services.filter(function (service) {\n              return 'INTERNAL' in service;\n            }) // legacy services\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .map(function (service) {\n              return service.INTERNAL.delete();\n            }), services.filter(function (service) {\n              return '_delete' in service;\n            }) // modularized services\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .map(function (service) {\n              return service._delete();\n            })))];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Provider.prototype.isComponentSet = function () {\n    return this.component != null;\n  };\n\n  Provider.prototype.getOrInitializeService = function (identifier) {\n    var instance = this.instances.get(identifier);\n\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, normalizeIdentifierForFactory(identifier));\n      this.instances.set(identifier, instance);\n    }\n\n    return instance || null;\n  };\n\n  Provider.prototype.normalizeInstanceIdentifier = function (identifier) {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  };\n\n  return Provider;\n}(); // undefined should be passed to the service factory for the default instance\n\n\nfunction normalizeIdentifierForFactory(identifier) {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager(component) {\n  return component.instantiationMode === \"EAGER\"\n  /* EAGER */\n  ;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\n\n\nvar ComponentContainer =\n/** @class */\nfunction () {\n  function ComponentContainer(name) {\n    this.name = name;\n    this.providers = new Map();\n  }\n  /**\r\n   *\r\n   * @param component Component being added\r\n   * @param overwrite When a component with the same name has already been registered,\r\n   * if overwrite is true: overwrite the existing component with the new component and create a new\r\n   * provider with the new component. It can be useful in tests where you want to use different mocks\r\n   * for different tests.\r\n   * if overwrite is false: throw an exception\r\n   */\n\n\n  ComponentContainer.prototype.addComponent = function (component) {\n    var provider = this.getProvider(component.name);\n\n    if (provider.isComponentSet()) {\n      throw new Error(\"Component \" + component.name + \" has already been registered with \" + this.name);\n    }\n\n    provider.setComponent(component);\n  };\n\n  ComponentContainer.prototype.addOrOverwriteComponent = function (component) {\n    var provider = this.getProvider(component.name);\n\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  };\n  /**\r\n   * getProvider provides a type safe interface where it can only be called with a field name\r\n   * present in NameServiceMapping interface.\r\n   *\r\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n   * themselves.\r\n   */\n\n\n  ComponentContainer.prototype.getProvider = function (name) {\n    if (this.providers.has(name)) {\n      return this.providers.get(name);\n    } // create a Provider for a service that hasn't registered with Firebase\n\n\n    var provider = new Provider(name, this);\n    this.providers.set(name, provider);\n    return provider;\n  };\n\n  ComponentContainer.prototype.getProviders = function () {\n    return Array.from(this.providers.values());\n  };\n\n  return ComponentContainer;\n}();\n\nexports.Component = Component;\nexports.ComponentContainer = ComponentContainer;\nexports.Provider = Provider;","map":{"version":3,"mappings":"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","names":["name","instanceFactory","type","Component","mode","instantiationMode","multipleInstances","props","serviceProps","DEFAULT_ENTRY_NAME","container","Map","Provider","identifier","normalizedIdentifier","normalizeInstanceIdentifier","instancesDeferred","has","deferred","Deferred","set","instance","getOrInitializeService","resolve","e","get","promise","options","optional","Error","component","isComponentEager","entries","_c","instanceIdentifier","instanceDeferred","delete","instances","services","Array","from","values","Promise","all","tslib","filter","service","map","INTERNAL","_delete","_a","normalizeIdentifierForFactory","undefined","ComponentContainer","provider","getProvider","isComponentSet","setComponent","providers","addComponent"],"sources":["../src/component.ts","../src/constants.ts","../src/provider.ts","../src/component_container.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { InstantiationMode, Name, NameServiceMapping } from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier: string = DEFAULT_ENTRY_NAME): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n      // If the service instance is available, resolve the promise with it immediately\n      try {\n        const instance = this.getOrInitializeService(normalizedIdentifier);\n        if (instance) {\n          deferred.resolve(instance);\n        }\n      } catch (e) {\n        // when the instance factory throws an exception during get(), it should not cause\n        // a fatal error. We just return the unresolved promise in this case.\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    const { identifier, optional } = {\n      identifier: DEFAULT_ENTRY_NAME,\n      optional: false,\n      ...options\n    };\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    try {\n      const instance = this.getOrInitializeService(normalizedIdentifier);\n\n      if (!instance) {\n        if (optional) {\n          return null;\n        }\n        throw Error(`Service ${this.name} is not available`);\n      }\n      return instance;\n    } catch (e) {\n      if (optional) {\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService(DEFAULT_ENTRY_NAME);\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier = this.normalizeInstanceIdentifier(\n        instanceIdentifier\n      );\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService(normalizedIdentifier)!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  private getOrInitializeService(\n    identifier: string\n  ): NameServiceMapping[T] | null {\n    let instance = this.instances.get(identifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(\n        this.container,\n        normalizeIdentifierForFactory(identifier)\n      ) as NameServiceMapping[T];\n      this.instances.set(identifier, instance);\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(identifier: string): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager(component: Component<Name>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n"]},"metadata":{},"sourceType":"script"}